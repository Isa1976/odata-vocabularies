{
    "$Version": "4.0",
    "$Reference": {
        "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.json": {
            "$Include": [
                {
                    "$Namespace": "Org.OData.Core.V1",
                    "$Alias": "Core"
                }
            ]
        }
    },
    "Org.OData.JSON.V1": {
        "$Alias": "JSON",
        "@Core.Description": "Terms, types, and functions for JSON properties",
        "@Core.LongDescription": "\n\n> Motivation from OData Extension for JSON Data - A Directional White Paper   \n\n> Example schema - separate files, link here, show excerpt\n\n**Example**\n\nThe `Employees` entity set has a property `resume` of type `JSON.JSON`, and one of its entities has a `resume` of\n```json\n{ \n  \"ssn\": \"1234\", \n  \"lastname\": \"Doe\", \n  \"address\": {\n    \"zipcode\": \"10022\", \n    \"street\": \"ABC st\"\n  },\n  \"experience\": \"excellent\", \n  ...\n  }\n```\n\nThis allows to\n```http\nGET http://www.example.com/mycompany/Employees\n      ?$filter=JSON.value(resume,'$.lastname') eq 'Doe'\n      &$orderby=JSON.value(resume,'$.experience')\n      &$compute=JSON.query(resume,'$.address') as address\n      &$expand=address\n```\n        ",
        "@Core.Links": [
            {
                "rel": "alternate",
                "href": "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.JSON.V1.xml"
            },
            {
                "rel": "latest-version",
                "href": "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.JSON.V1.json"
            },
            {
                "rel": "describedby",
                "href": "https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.JSON.V1.md"
            }
        ],
        "Schema": {
            "$Kind": "Term",
            "$Type": "JSON.JSON",
            "$AppliesTo": [
                "Parameter",
                "Property",
                "ReturnType",
                "Term",
                "TypeDefinition"
            ],
            "@Core.RequiresType": "Edm.Stream",
            "@Core.Description": "The JSON Schema for JSON values of the annotated property, parameter, return type, term, or type definition",
            "@Core.LongDescription": "The schema can be a schema reference, i.e. `{\"$ref\":\"url/of/schemafile#/path/to/schema/within/schemafile\"}`"
        },
        "query": [
            {
                "$Kind": "Function",
                "@Core.Description": "Query stream values of media type `application/json`, returning a stream value of media type `application/json`",
                "@Core.LongDescription": "Extracts a JSON value, such as an array, object, or a JSON scalar value (string, number, boolean, or `null`) from the `input` JSON value:\n- If `path` only consists of the root selector followed by member and index selectors, it returns the identified single node within `input`, or `null` if no node is identified. \n- If `path` potentially identifies multiple nodes within `input` (by using descendant, wildcard, union, array subset, or filter selectors), it returns an array containing the identified nodes, or an empty array if no node is identified. \n- If `input` is not a valid JSON value, the function returns `null`.\n- If `path` is `null`, not a valid [JSONPath expression](#Path), or does not match the structure of `input` (for example applying an index selector to a scalar value), the function returns `null`. \n          ",
                "$Parameter": [
                    {
                        "$Name": "input",
                        "$Type": "JSON.JSON",
                        "$Nullable": true,
                        "@Core.Description": "JSON input"
                    },
                    {
                        "$Name": "path",
                        "$Type": "JSON.Path",
                        "$Nullable": true,
                        "@Core.Description": "JSONPath expression to be applied to value of `expr`"
                    }
                ],
                "$ReturnType": {
                    "$Type": "JSON.JSON",
                    "$Nullable": true,
                    "@Core.Description": "JSON value resulting from applying `path` to `input`"
                }
            }
        ],
        "value": [
            {
                "$Kind": "Function",
                "@Core.Description": "Query stream values of media type `application/json`, returning an OData primitive value",
                "@Core.LongDescription": "Extracts a single OData primitive value from the `input` JSON value:\n- If `path` only consists of the root selector followed by member and index selectors and identifies a single scalar JSON value (string, number, boolean, or `null`) within `input`, it returns the identified single value cast to an OData primitive value (see below).\n- If `path` identifies multiple nodes within `input` (by using descendant, wildcard, union, array subset, or filter selectors), identifies an object or array, or does not identify any node, the function returns `null`.\n- If `input` is not a valid JSON value, the function returns `null`.\n- If `path` is `null`, not a valid [JSONPath expression](#Path), or does not match the structure of `input` (for example applying an index selector to a scalar value), the function returns `null`.\n\nIf a single non-null scalar JSON value is identified by `path` within `input`, the function returns that value as an OData primitive value of type\n- `Edm.String` if the value is a JSON string\n- `Edm.Boolean` if the value is `true` or `false`\n- `Edm.Decimal` with unspecified precision and floating scale if the value is a JSON number\n          ",
                "$Parameter": [
                    {
                        "$Name": "input",
                        "$Type": "JSON.JSON",
                        "$Nullable": true,
                        "@Core.Description": "JSON input"
                    },
                    {
                        "$Name": "path",
                        "$Type": "JSON.Path",
                        "$Nullable": true,
                        "@Core.Description": "JSONPath expression to be applied to value of `expr`"
                    }
                ],
                "$ReturnType": {
                    "$Type": "Edm.PrimitiveType",
                    "$Nullable": true,
                    "@Core.Description": "OData primitive value resulting from applying `path` to `input`"
                }
            }
        ],
        "JSON": {
            "$Kind": "TypeDefinition",
            "$UnderlyingType": "Edm.Stream",
            "@Core.Description": "Textual data of media type `application/json`",
            "@Core.MediaType": "application/json",
            "@Core.AcceptableMediaTypes": [
                "application/json"
            ]
        },
        "Path": {
            "$Kind": "TypeDefinition",
            "$UnderlyingType": "Edm.String",
            "@Core.Description": "[JSONPath](https://datatracker.ietf.org/doc/html/draft-ietf-jsonpath-base-01) expression",
            "@Core.LongDescription": "Implementations SHOULD support at least the following subset of JSONPath:\n\nJSONPath | Description | Examples\n---------|-------------|--------\n`$` | Root selector | `$`\n`.` | Member selector | `$.foo`, `$.foo.bar`\n`[]` | Index selector with member name (single- or double-quoted string using JSON escaping rules) or zero-based array index (non-negative base-10 integer) | `$['foo']`, `$.foo[\"bar\"]`, `$.bar[0]`, `$.bar[42]`\n\nImplementations MAY support in addition:\n\nJSONPath | Description | Examples\n---------|-------------|--------\n`[]` | Index selector with negative integer array index (counts from the end of the array) | `$.bar[-1]`\n`..` | Descendant selector: searches for the specified member name recursively and returns an array of all values with this member name | `$..foo`\n`*` | Wildcard selector matching all elements in an object or array | `$.foo.*`, `$.bar[*]`, `$..*`\n`[,]` | Union selector for alternate member names or array indices as a set | `$.foo['bar','baz']`, `$.bar[0,1,2,3,5,7,11]`\n`[start:end]` | Array subset by range of indices (including the item at _start_ and excluding the item at _end_ | `$.bar[2:5]`, same as `$.bar[2,3,4]`\n`[start:]` | Array subset from _start_ to end of array | `$.bar[2:]`\n`[:n]` | The first _n_ array items | `$.bar[:4]`\n`[-n:]` | The last _n_ array items | `$.bar[-3:]`\n`[start:end:step]` | [Array slice selector](https://datatracker.ietf.org/doc/html/draft-ietf-jsonpath-base-01#section-3.5.6) |\n`[?()]` | Filter selector | `$.bar[?(@.baz==42)]`\n`()` | Static expression | `$.bar[(@.length-1)]`\n`@` | in expressions: the current node being processed\n\n**References**\n- Current IETF draft: https://datatracker.ietf.org/doc/html/draft-ietf-jsonpath-base-01\n- Historic site: https://goessner.net/articles/JsonPath/\n- Node.js implementation: https://www.npmjs.com/package/jsonpath\n- Java implementation: https://github.com/json-path/JsonPath\n- Online evaluator: https://jsonpath.com/\n          "
        }
    }
}