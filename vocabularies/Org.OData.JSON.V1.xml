<?xml version="1.0" encoding="utf-8"?>
<!--

  Technical Committee:
  OASIS Open Data Protocol (OData) TC
  https://www.oasis-open.org/committees/odata

  Chairs:
  - Ralf Handl (ralf.handl@sap.com), SAP SE
  - Michael Pizzo (mikep@microsoft.com), Microsoft

  Editors:
  - Ralf Handl (ralf.handl@sap.com), SAP SE
  - Michael Pizzo (mikep@microsoft.com), Microsoft

  Additional artifacts:
  This vocabulary is one component of a Work Product that also includes the following vocabulary components:
  - OData Core Vocabulary. Latest version: https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml.
  - OData Measures Vocabulary. Latest version: https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Measures.V1.xml.
  - OData Capabilities Vocabulary. Latest version: https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Capabilities.V1.xml.
  - OData Validation Vocabulary. Latest version: https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Validation.V1.xml.
  - OData Aggregation Vocabulary. Latest version: https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Aggregation.V1.xml.
  - OData Authorization Vocabulary. Latest version: https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Authorization.V1.xml.
  - OData JSON Vocabulary. Latest version: https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.JSON .V1.xml.

  Related work:
  This vocabulary replaces or supersedes:
  - OData Version 4.0 Vocabulary components: OData JSON Vocabulary.
  This vocabulary is related to:
  - OData Version 4.01 Part 1: Protocol. Latest version: http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html.
  - OData Version 4.01 Part 2: URL Conventions. Latest version: http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html.
  - OData Common Schema Definition Language (CSDL) JSON Representation Version 4.01. Latest version: http://docs.oasis-open.org/odata/odata-csdl-json/v4.01/odata-csdl-json-v4.01.html.
  - OData Common Schema Definition Language (CSDL) XML Representation Version 4.01. Latest version: http://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html.
  - OData JSON Format Version 4.01. Latest version: http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html.
  - OData Extension for Data Aggregation Version 4.0. Latest version: http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/odata-data-aggregation-ext-v4.0.html.

  Abstract:
  This document contains terms for JSON properties.

-->
<edmx:Edmx xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx" Version="4.0">
  <edmx:Reference Uri="https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml">
    <edmx:Include Alias="Core" Namespace="Org.OData.Core.V1" />
  </edmx:Reference>
  <edmx:DataServices>
    <Schema xmlns="http://docs.oasis-open.org/odata/ns/edm" Namespace="Org.OData.JSON.V1" Alias="JSON">
      <Annotation Term="Core.Description">
        <String>Terms for JSON properties</String>
      </Annotation>
      <Annotation Term="Core.Links">
        <Collection>
          <Record>
            <PropertyValue Property="rel" String="latest-version" />
            <PropertyValue Property="href" String="https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.JSON.V1.xml" />
          </Record>
          <Record>
            <PropertyValue Property="rel" String="alternate" />
            <PropertyValue Property="href" String="https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.JSON.V1.json" />
          </Record>
          <Record>
            <PropertyValue Property="rel" String="describedby" />
            <PropertyValue Property="href" String="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.JSON.V1.md" />
          </Record>
        </Collection>
      </Annotation>

      <Term Name="Schema" Type="JSON.JSON" Nullable="false" AppliesTo="Parameter Property ReturnType Term TypeDefinition">
        <Annotation Term="Core.RequiresType" String="Edm.Stream" />
        <Annotation Term="Core.Description" String="The JSON Schema for JSON values of the annotated property, parameter, return type, term, or type definition" />
        <Annotation Term="Core.LongDescription">
          <String>The schema can be a schema reference, i.e. `{"$ref":"url/of/schemafile#/path/to/schema/within/schemafile"}`</String>
        </Annotation>
      </Term>

      <Function Name="query">
        <Annotation Term="Core.Description" String="Query stream values of media type `application/json`" />
        <Annotation Term="Core.LongDescription">
          <String>Extracts a JSON value, such as an array or object, or a JSON scalar value, such as a string, number, or boolean.

_TODO: describe behavior and edge cases, especially null handling_
          </String>
        </Annotation>
        <Parameter Name="input" Type="JSON.JSON">
          <Annotation Term="Core.Description" String="JSON input" />
        </Parameter>
        <Parameter Name="path" Type="JSON.Path" Nullable="false">
          <Annotation Term="Core.Description" String="JSONPath expression to be applied to value of `expr`" />
        </Parameter>
        <ReturnType Type="JSON.JSON">
          <Annotation Term="Core.Description" String="JSON value resulting from applying `path` to `input`" />
        </ReturnType>
      </Function>

      <!-- TODO: do we need the "value" function, or is this covered by cast()? -->

      <TypeDefinition Name="JSON" UnderlyingType="Edm.Stream">
        <Annotation Term="Core.Description" String="Textual data of media type `application/json`" />
        <Annotation Term="Core.MediaType" String="application/json" />
        <Annotation Term="Core.AcceptableMediaTypes">
          <Collection>
            <String>application/json</String>
          </Collection>
        </Annotation>
      </TypeDefinition>


      <TypeDefinition Name="Path" UnderlyingType="Edm.String">
        <Annotation Term="Core.Description" String="[JSONPath](https://datatracker.ietf.org/doc/html/draft-ietf-jsonpath-base-01) expression" />
        <Annotation Term="Core.LongDescription">
          <String>Implementations SHOULD support at least the following subset of JSONPath:

_TODO: check which data sources support which subset, then reduce expressions_
- SQL Server: https://docs.microsoft.com/en-us/sql/relational-databases/json/json-path-expressions-sql-server?view=sql-server-2017
- SAP HANA: https://help.sap.com/products/SAP_HANA_PLATFORM/4fe29514fd584807ac9f2a04f6754767/3126ea33d50d42d19517a08fe22ec5a1.html?version=2.0.05#description
- Google BigQuery references the Java implementation - all of it supported?

JSONPath | Description | Examples
---------|-------------|--------
`$` | The root object, array, or value
`.` | Child member operator | `$.foo`, `$.foo.bar`
`..` | Recursive descendant operator: searches for the specified member name recursively and returns an array of all values with this property name | `$..foo`
`*` | Wildcard matching all elements in an object or array | `$.foo.*`, `$.bar[*]`
`[]` | Subscript operator, accepting names (single-quoted strings) or array indices (zero-based integers, negative integers count from the end of the array) | `$['foo']`, `$.foo['bar']`, `$.bar[0]`, `$.bar[-1]`
`[,]` | Union operator for alternate names or array indices as a set | `$.foo['bar','baz']`, `$.bar[0,1,2,3,5,7,11]`
`[start:end]` | Array subset by range of indices | `$.bar[2:4]`
`[start:]` | Array subset from index to end of array | `$.bar[2:]`
`[:end]` | Array subset from start of array to index | `$.bar[:4]`
`[-start:]` | Array subset from _length-start_ to end of array | `$.bar[-3:]`
`[?()]` | Filter expession | `$.bar[?(@.baz==42)]`
`[()]` | Static expression | `$.bar[(@.length-1)]`
`@` | in filter expressions: the current node being processed

**References**
- Current IETF draft: https://datatracker.ietf.org/doc/html/draft-ietf-jsonpath-base-01
- Historic site: https://goessner.net/articles/JsonPath/
- Node.js implementation: https://www.npmjs.com/package/jsonpath
- Java implementation: https://github.com/json-path/JsonPath
- Online evaluator: https://jsonpath.com/
          </String>
        </Annotation>
      </TypeDefinition>

    </Schema>
  </edmx:DataServices>
</edmx:Edmx>
